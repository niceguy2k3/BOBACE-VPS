const mongoose = require('mongoose');
const User = require('../models/user.model');
require('dotenv').config();

// Th√¥ng tin admin
const ADMIN_EMAIL = 'nhunam1311@gmail.com';
const ADMIN_PASSWORD = 'Nhunam2014';
const ADMIN_FULLNAME = 'Nam Nam';

// K·∫øt n·ªëi ƒë·∫øn MongoDB
const connectToDatabase = async () => {
  try {
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/hen-ho-tra-sua';
    await mongoose.connect(mongoUri, {
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000,
      family: 4
    });
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi ƒë·∫øn MongoDB');
    return true;
  } catch (err) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err.message);
    return false;
  }
};

// T·∫°o ho·∫∑c c·∫≠p nh·∫≠t t√†i kho·∫£n admin
const createAdmin = async () => {
  try {
    // Ki·ªÉm tra xem ƒë√£ c√≥ user v·ªõi email n√†y ch∆∞a
    let admin = await User.findOne({ email: ADMIN_EMAIL });

    if (admin) {
      // N·∫øu ƒë√£ c√≥, c·∫≠p nh·∫≠t password v√† ƒë·∫£m b·∫£o role l√† admin
      console.log(`üìù ƒê√£ t√¨m th·∫•y user v·ªõi email ${ADMIN_EMAIL}, ƒëang c·∫≠p nh·∫≠t...`);
      
      // Set password (plaintext) - User model s·∫Ω t·ª± ƒë·ªông hash khi save
      admin.password = ADMIN_PASSWORD;
      admin.role = 'admin';
      admin.fullName = ADMIN_FULLNAME;
      admin.verification = {
        isVerified: true,
        method: 'email',
        verifiedAt: new Date()
      };
      admin.premium = true;
      admin.emailVerified = true;
      
      await admin.save();
      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√†i kho·∫£n admin th√†nh c√¥ng!');
      console.log(`   Email: ${ADMIN_EMAIL}`);
      console.log(`   T√™n: ${ADMIN_FULLNAME}`);
      console.log(`   Role: admin`);
    } else {
      // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
      console.log('üî® ƒêang t·∫°o t√†i kho·∫£n admin m·ªõi...');
      
      // T·∫°o t√†i kho·∫£n admin v·ªõi c√°c th√¥ng tin b·∫Øt bu·ªôc
      // Password s·∫Ω ƒë∆∞·ª£c hash t·ª± ƒë·ªông b·ªüi User model pre-save hook
      admin = new User({
        email: ADMIN_EMAIL,
        password: ADMIN_PASSWORD,
        fullName: ADMIN_FULLNAME,
        birthDate: new Date('2003-11-13'), // Ng√†y sinh m·∫∑c ƒë·ªãnh
        gender: 'male', // Gi·ªõi t√≠nh m·∫∑c ƒë·ªãnh
        role: 'admin',
        verification: {
          isVerified: true,
          method: 'email',
          verifiedAt: new Date()
        },
        premium: true,
        emailVerified: true,
        createdAt: new Date(),
        lastActive: new Date()
      });
      
      await admin.save();
      console.log('‚úÖ ƒê√£ t·∫°o t√†i kho·∫£n admin th√†nh c√¥ng!');
      console.log(`   Email: ${ADMIN_EMAIL}`);
      console.log(`   Password: ${ADMIN_PASSWORD}`);
      console.log(`   T√™n: ${ADMIN_FULLNAME}`);
      console.log(`   Role: admin`);
    }
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o/c·∫≠p nh·∫≠t admin:', error.message);
    throw error;
  }
};

// H√†m ch√≠nh
const main = async () => {
  try {
    console.log('üöÄ B·∫Øt ƒë·∫ßu t·∫°o/c·∫≠p nh·∫≠t t√†i kho·∫£n admin...');
    
    const connected = await connectToDatabase();
    if (!connected) {
      console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database. Script s·∫Ω kh√¥ng t·∫°o admin.');
      process.exit(1);
    }
    
    await createAdmin();
    
    // ƒê√≥ng k·∫øt n·ªëi
    await mongoose.connection.close();
    console.log('‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
    console.log('‚ú® Ho√†n th√†nh!');
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
    await mongoose.connection.close().catch(() => {});
    process.exit(1);
  }
};

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  main();
}

module.exports = { createAdmin, connectToDatabase };

